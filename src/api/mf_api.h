/*
 * Copyright (C) 2016 University of Stuttgart
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef MF_API_H_
#define MF_API_H_



typedef struct mf_metric_t mf_metric;

struct mf_metric_t {
    const char* timestamp; /* YYYY-MM-ddTHH:MM:SS.ZZZ */
    const char* type;      /* type of the metric, e.g. PAPI-C, energy or progress */
    const char* name;      /* name of the metric */
    const char* value;     /* value of the metric in question */
};// mf_metric_t;

/** @brief Registers a new user and experiment.
 *
 * This function registers both the given username at the monitoring server, as
 * well as returns new experiment ID, which is automatically generated by
 * Elasticsearch. It is advised to call this function first to configure the API.
 *
 * @param server the URL of the monitoring server, e.g. localhost:3030
 * @param user the user who has started the experiment
 * @param application an application name
 * @param job_id a job_id associated with the experiment (equals mf_api if not set)
 *
 * @return the response from the server in JSON format with the experiment ID.
 */
const char* mf_api_new(
    const char* server,
    const char* user,
    const char* application,
    const char* experiment_id,
    const char* job_id
);

/** @brief Sends new metric data to the monitoring server.
 *
 * This function sends new metric data to the monitoring server. Please ensure
 * that the connection to the server is initialized by calling mf_api_init().
 *
 * @param metric representation of metric data including a timestamp
 *
 * @return the response from the monitoring server in JSON format
 */
char* mf_api_update(mf_metric* metric);

/** @brief Adds a new user to the database.
 *
 * This function adds a new user to the monitoring server.
 *
 * @param username the selected username
 *
 * @return the response from the server in JSON format
 */
char* mf_api_add_user(char* username);

/** @brief Creates a new experiment in order to send metric data.
 *
 * This function registers a new experiment at the monitoring server.
 *
 * @param json a JSON document
 *
 * @return the response from the server in JSON format
 */
char* mf_api_new_experiment(char* json);

/** @brief Returns the current monitoring server.
 *
 * @return current monitoring server URL
 */
const char* mf_api_get_server();

/** @brief Returns the current user.
 *
 * @return current username
 */
const char* mf_api_get_user();

/** @brief Returns the current application name
 *
 * @return current application name
 */
const char* mf_api_get_application();

/** @brief Returns the current job id
 *
 * @return current job id
 */
const char* mf_api_get_job_id();

/** @brief Returns the current experiment ID
 *
 * @return current experiment ID
 */
const char* mf_api_get_id();

/** @brief Clears the internal data structures.
 *
 * This method clears the internal data structures. It should be used at the
 * end of all operations in a program.
 */
void mf_api_clear();

/** @brief Gets the current time formatted correctly for Elasticsearch.
 *
 * This function returns the current timestamp having the following pattern:
 * YYYY-MM-ddTHH:MM:SS.ZZZ
 *
 * @return current timestamp as a string
 */
char* mf_api_get_time();



#endif
